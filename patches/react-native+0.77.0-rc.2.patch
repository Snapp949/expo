diff --git a/node_modules/react-native/ReactAndroid/cmake-utils/default-app-setup/OnLoad.cpp b/node_modules/react-native/ReactAndroid/cmake-utils/default-app-setup/OnLoad.cpp
index 1e2420d..cef8341 100644
--- a/node_modules/react-native/ReactAndroid/cmake-utils/default-app-setup/OnLoad.cpp
+++ b/node_modules/react-native/ReactAndroid/cmake-utils/default-app-setup/OnLoad.cpp
@@ -29,12 +29,7 @@

 #include <DefaultComponentsRegistry.h>
 #include <DefaultTurboModuleManagerDelegate.h>
-#if __has_include("<autolinking.h>")
-#define AUTOLINKING_AVAILABLE 1
 #include <autolinking.h>
-#else
-#define AUTOLINKING_AVAILABLE 0
-#endif
 #include <fbjni/fbjni.h>
 #include <react/renderer/componentregistry/ComponentDescriptorProviderRegistry.h>
 #include <rncore.h>
@@ -49,7 +44,7 @@
 namespace facebook::react {

 void registerComponents(
-    std::shared_ptr<const ComponentDescriptorProviderRegistry> registry) {
+  std::shared_ptr<const ComponentDescriptorProviderRegistry> registry) {
   // Custom Fabric Components go here. You can register custom
   // components coming from your App or from 3rd party libraries here.
   //
@@ -61,15 +56,13 @@ void registerComponents(
   REACT_NATIVE_APP_COMPONENT_REGISTRATION(registry);
 #endif

-#if AUTOLINKING_AVAILABLE
   // And we fallback to the components autolinked
   autolinking_registerProviders(registry);
-#endif
 }

 std::shared_ptr<TurboModule> cxxModuleProvider(
-    const std::string& name,
-    const std::shared_ptr<CallInvoker>& jsInvoker) {
+  const std::string& name,
+  const std::shared_ptr<CallInvoker>& jsInvoker) {
   // Here you can provide your CXX Turbo Modules coming from
   // either your application or from external libraries. The approach to follow
   // is similar to the following (for a module called `NativeCxxModuleExample`):
@@ -78,17 +71,13 @@ std::shared_ptr<TurboModule> cxxModuleProvider(
   //   return std::make_shared<NativeCxxModuleExample>(jsInvoker);
   // }

-#if AUTOLINKING_AVAILABLE
   // And we fallback to the CXX module providers autolinked
   return autolinking_cxxModuleProvider(name, jsInvoker);
-#endif
-
-  return nullptr;
 }

 std::shared_ptr<TurboModule> javaModuleProvider(
-    const std::string& name,
-    const JavaTurboModule::InitParams& params) {
+  const std::string& name,
+  const JavaTurboModule::InitParams& params) {
   // Here you can provide your own module provider for TurboModules coming from
   // either your application or from external libraries. The approach to follow
   // is similar to the following (for a library called `samplelibrary`):
@@ -112,12 +101,10 @@ std::shared_ptr<TurboModule> javaModuleProvider(
     return module;
   }

-#if AUTOLINKING_AVAILABLE
   // And we fallback to the module providers autolinked
   if (auto module = autolinking_ModuleProvider(name, params)) {
     return module;
   }
-#endif

   return nullptr;
 }
@@ -127,11 +114,11 @@ std::shared_ptr<TurboModule> javaModuleProvider(
 JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void*) {
   return facebook::jni::initialize(vm, [] {
     facebook::react::DefaultTurboModuleManagerDelegate::cxxModuleProvider =
-        &facebook::react::cxxModuleProvider;
+      &facebook::react::cxxModuleProvider;
     facebook::react::DefaultTurboModuleManagerDelegate::javaModuleProvider =
-        &facebook::react::javaModuleProvider;
+      &facebook::react::javaModuleProvider;
     facebook::react::DefaultComponentsRegistry::
-        registerComponentDescriptorsFromEntryPoint =
-            &facebook::react::registerComponents;
+    registerComponentDescriptorsFromEntryPoint =
+      &facebook::react::registerComponents;
   });
 }
\ No newline at end of file
